<!DOCTYPE HTML><html><head>
<meta http-equiv="Content-Type" content="text/html; charset=utf-8">

<title>第二节：初认React native</title>
    <!--mark |wiz_custom_css| for wizeditor replace it-->
<style id="wiz_custom_css">html, body {            font-size: 15px;        }        body {            font-family: Helvetica, 'Hiragino Sans GB', '微软雅黑', 'Microsoft YaHei UI', SimSun, SimHei, arial, sans-serif;            line-height: 1.6;            margin: 0;            padding: 20px 15px;            padding: 1.33rem 1rem;        }        h1, h2, h3, h4, h5, h6 {            margin: 20px 0 10px;            margin: 1.33rem 0 0.667rem;            padding: 0;            font-weight: bold;        }        h1 {            font-size: 21px;            font-size: 1.4rem;        }        h2 {            font-size: 20px;            font-size: 1.33rem;        }        h3 {            font-size: 18px;            font-size: 1.2rem;        }        h4 {            font-size: 17px;            font-size: 1.13rem;        }        h5 {            font-size: 15px;            font-size: 1rem;        }        h6 {            font-size: 15px;            font-size: 1rem;            color: #777777;            margin: 1rem 0;        }        div, p, ul, ol, dl, li {            margin: 0;        }        blockquote, table, pre, code {            margin: 8px 0;        }        ul, ol {            padding-left: 32px;            padding-left: 2.13rem;        }        blockquote {            padding: 0 12px;            padding: 0 0.8rem;        }        blockquote > :first-child {            margin-top: 0;        }        blockquote > :last-child {            margin-bottom: 0;        }        img {            border: 0;            max-width: 100%;            height: auto !important;            margin: 2px 0;        }        table {            border-collapse: collapse;            border: 1px solid #bbbbbb;        }        td, th {            padding: 4px 8px;            border-collapse: collapse;            border: 1px solid #bbbbbb;			        }        @media only screen and (-webkit-max-device-width: 1024px), only screen and (-o-max-device-width: 1024px), only screen and (max-device-width: 1024px), only screen and (-webkit-min-device-pixel-ratio: 3), only screen and (-o-min-device-pixel-ratio: 3), only screen and (min-device-pixel-ratio: 3) {            html, body {                font-size: 17px;            }            body {                line-height: 1.7;                padding: 0.75rem 0.9375rem;                color: #353c47;            }            h1 {                font-size: 2.125rem;            }            h2 {                font-size: 1.875rem;            }            h3 {                font-size: 1.625rem;            }            h4 {                font-size: 1.375rem;            }            h5 {                font-size: 1.125rem;            }            h6 {                color: inherit;            }            ul, ol {                padding-left: 2.5rem;            }            blockquote {                padding: 0 0.9375rem;            }        }</style><link rel="stylesheet"  name="wiz_tmp_editor_style" href="rn_note_2_files/fonts_11.css"><link type="text/css" rel="stylesheet" id="wiz_code_highlight_link" href="rn_note_2_files/wiz_code_highlight_5.css"></head>

<body spellcheck="false" >1、组件化：所有的页面元素是由组件构成的，组件在代码里面体现是一个标签。<div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; 组件分为：系统组件和自定义组件，组件有自己的生命周期。<br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</div><div> &nbsp; &nbsp;1.1使用系统组件的时候要在如下代码中导入：<span style="line-height: 1.6;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-js"><span class="kwd">import</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L1"><code class="language-js"><span class="pln">      </span><span class="typ">AppRegistry</span><span class="pun">,</span></code></li><li class="L2"><code class="language-js"><span class="pln">      </span><span class="typ">Text</span><span class="pun">,</span></code></li><li class="L3"><code class="language-js"><span class="pln">      </span><span class="typ">ScrollView</span><span class="pun">,</span></code></li><li class="L4"><code class="language-js"><span class="pln">      </span><span class="typ">Image</span></code></li><li class="L5"><code class="language-js"><span class="pln">  </span><span class="pun">}</span><span class="pln"> from </span><span class="str">'react-native'</span><span class="pun">;</span></code></li></ol></pre></div><div>&nbsp; &nbsp; 1.2使用自定义组件时，在同一个文件中，可以直接使用，在不同文件中要使用require导入<br></div><div>&nbsp; &nbsp; &nbsp; &nbsp; 1.2.1：自定义组件：<span style="line-height: 1.6;">&nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp; &nbsp;&nbsp;</span></div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-js"><span class="com">/**</span></code></li><li class="L1"><code class="language-js"><span class="com">   * 闪烁文字（ state props 练习）</span></code></li><li class="L2"><code class="language-js"><span class="com">   */</span></code></li><li class="L3"><code class="language-js"></code></li><li class="L4"><code class="language-js"><span class="pln">  </span><span class="kwd">class</span><span class="pln"> </span><span class="typ">ShakeText</span><span class="pln"> extends </span><span class="typ">Component</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-js"></code></li><li class="L6"><code class="language-js"><span class="pln">      </span><span class="com">//构造函数初始化</span></code></li><li class="L7"><code class="language-js"><span class="pln">      constructor</span><span class="pun">(</span><span class="pln">props</span><span class="pun">)</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L8"><code class="language-js"><span class="pln">          super</span><span class="pun">(</span><span class="pln">props</span><span class="pun">);</span></code></li><li class="L9"><code class="language-js"><span class="pln">          </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">state </span><span class="pun">=</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L0"><code class="language-js"><span class="pln">              isShowText</span><span class="pun">:</span><span class="pln"> </span><span class="kwd">true</span></code></li><li class="L1"><code class="language-js"><span class="pln">          </span><span class="pun">};</span></code></li><li class="L2"><code class="language-js"></code></li><li class="L3"><code class="language-js"><span class="pln">          </span><span class="com">//加载定时器</span></code></li><li class="L4"><code class="language-js"><span class="pln">          setInterval</span><span class="pun">(()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L5"><code class="language-js"><span class="pln">              </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">setState</span><span class="pun">({</span></code></li><li class="L6"><code class="language-js"><span class="pln">                  isShowText</span><span class="pun">:</span><span class="pln"> </span><span class="pun">!</span><span class="kwd">this</span><span class="pun">.</span><span class="pln">state</span><span class="pun">.</span><span class="pln">isShowText</span></code></li><li class="L7"><code class="language-js"><span class="pln">              </span><span class="pun">});</span></code></li><li class="L8"><code class="language-js"><span class="pln">          </span><span class="pun">},</span><span class="pln"> </span><span class="lit">200</span><span class="pun">);</span></code></li><li class="L9"><code class="language-js"><span class="pln">      </span><span class="pun">}</span></code></li><li class="L0"><code class="language-js"></code></li><li class="L1"><code class="language-js"><span class="pln">      </span><span class="com">//渲染</span></code></li><li class="L2"><code class="language-js"><span class="pln">      render</span><span class="pun">()</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L3"><code class="language-js"><span class="pln">          let disPlayContent </span><span class="pun">=</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">state</span><span class="pun">.</span><span class="pln">isShowText </span><span class="pun">?</span><span class="pln"> </span><span class="kwd">this</span><span class="pun">.</span><span class="pln">props</span><span class="pun">.</span><span class="pln">name </span><span class="pun">:</span><span class="pln"> </span><span class="str">""</span><span class="pun">;</span></code></li><li class="L4"><code class="language-js"><span class="pln">          </span><span class="kwd">return</span><span class="pln"> </span><span class="pun">(</span><span class="pln"> </span><span class="pun">&lt;</span></code></li><li class="L5"><code class="language-js"><span class="pln">              </span><span class="typ">Text</span><span class="pln"> </span><span class="pun">&gt;</span><span class="pln"> </span><span class="pun">{</span></code></li><li class="L6"><code class="language-js"><span class="pln">                  disPlayContent</span></code></li><li class="L7"><code class="language-js"><span class="pln">              </span><span class="pun">}</span><span class="pln"> </span><span class="pun">&lt;</span><span class="pln"> </span><span class="pun">/</span><span class="typ">Text</span><span class="pun">&gt;</span></code></li><li class="L8"><code class="language-js"><span class="pln">          </span><span class="pun">);</span></code></li><li class="L9"><code class="language-js"><span class="pln">      </span><span class="pun">}</span></code></li><li class="L0"><code class="language-js"></code></li><li class="L1"><code class="language-js"><span class="pln">  </span><span class="pun">}</span></code></li></ol></pre></div><div>2、注册组件：即注册主界面的展示组件，只能注册一个一次</div><div><div><pre class="prettyprint linenums prettyprinted"><ol class="linenums"><li class="L0"><code class="language-js"><span class="typ">AppRegistry</span><span class="pun">.</span><span class="pln">registerComponent</span><span class="pun">(</span><span class="str">'demo'</span><span class="pun">,</span><span class="pln"> </span><span class="pun">()</span><span class="pln"> </span><span class="pun">=&gt;</span><span class="pln"> demo</span><span class="pun">);</span></code></li></ol></pre></div><div>3.自定义组件：</div></div><div>3.1：组件的构成部分：属性，状态，生命周期，样式</div><div><br></div></body></html>